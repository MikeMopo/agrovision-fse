# render.yaml
# Defines the services for deploying the WordPress theme and a MySQL database on Render.

services:
  # MySQL Database Service (as a private service)
  # This service should be defined first to ensure it's provisioned before the web service that depends on it.
  - type: pserv # Private Service, not directly accessible from the internet
    name: wordpress-mysql
    env: docker
    dockerImage: mysql:8.0 # Using MySQL 8.0
    plan: free # Or your preferred instance type for databases
    envVars:
      - key: MYSQL_ROOT_PASSWORD
        generateValue: true # Render generates a secure root password
      - key: MYSQL_DATABASE
        value: wordpress
      - key: MYSQL_USER
        value: wordpress
      - key: MYSQL_PASSWORD
        generateValue: true # Generate the password here. This is the source of truth.
    disks:
      - name: mysql-data
        mountPath: /var/lib/mysql
        sizeGB: 10 # Adjust as needed
    # MySQL typically runs on port 3306. Render's private networking handles access.

  # WordPress Web Service
  - type: web
    name: wordpress-theme
    env: docker # Specifies that we are using a Dockerfile
    dockerfilePath: ./Dockerfile
    plan: free # Or your preferred instance type
    healthCheckPath: / # WordPress should respond at the root
    envVars:
      - key: WORDPRESS_DB_HOST
        fromService:
          type: pserv
          name: wordpress-mysql
          property: hostport # Use the internal host:port provided by Render
      - key: WORDPRESS_DB_USER
        value: wordpress
      - key: WORDPRESS_DB_PASSWORD
        fromService:
          type: pserv
          name: wordpress-mysql
          envVarKey: MYSQL_PASSWORD # Source the password from the database service
      - key: WORDPRESS_DB_NAME
        value: wordpress
      # It's good practice to set WordPress salts as environment variables
      # You can generate these from https://api.wordpress.org/secret-key/1.1/salt/
      # Example:
      # - key: WORDPRESS_AUTH_KEY
      #   generateValue: true
      # ... (and so on for other salts)

    # Mount a persistent disk for WordPress uploads and other persistent data
    disks:
      - name: wordpress-data
        mountPath: /var/www/html/wp-content # Or /var/www/html for all WP data
        sizeGB: 10 # Adjust as needed

# Note: For a production setup, consider:
# - Using specific versions for Docker images (e.g., wordpress:6.4.2-php8.2-apache, mysql:8.0.33)
# - More robust secret management for database passwords.
# - Database backup strategy for the MySQL container.
# - Configuring WordPress salts and keys via environment variables.
# - Adjusting instance plans and disk sizes based on expected load.
